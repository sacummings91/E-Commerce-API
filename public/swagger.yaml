swagger: "2.0"
info:
  description: "This is a sample E-commerce store server."
  version: "1.0.0"
  title: "E-commerce Website"
host: "localhost:8000"
basePath: "/"
schemes:
- "http"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
consumes:
  - "application/json"
produces:
  - "application/json"
paths:
  /token:
    post:
      tags:
        - "token"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Username and Password"
        required: true
        schema:
          $ref: "#/definitions/loginObj"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
  /items:
    get:
      tags:
        - "items"
      summary: "Fetches all the clothing items"
      description: "Gets the entire clothing db"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/clothing"
        400:
          description: "Bad Request"
          schema:
            type: "string"
        404:
          description: "Clothing Items not found"
          schema:
            type: "string"
    post:
      tags:
        - "items"
      security:
        - Bearer: []
      summary: "Add a new clothing item to the store"
      description: "Adds a new item to the db"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "newItem"
        in: "body"
        description: "Clothing object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/clothing"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/clothing"
        405:
          description: "Invalid input"
          schema:
            type: "string"
  /items/{itemId}:
    get:
      tags:
        - "items"
      summary: "Find clothing by ID"
      description: "Returns a single clothing item by ID"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "ID of clothing item to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/clothing"
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "Clothing item not found"
          schema:
            type: "string"
    patch:
      tags:
       - "items"
      security:
        - Bearer: []
      summary: "Update an existing clothing item"
      description: "Updates a single item in the db"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "updatedItem"
        in: "body"
        description: "Clothing item to be updated"
        required: true
        schema:
          type: "object"
          required:
          - "price"
          properties:
            price:
              type: "number"
              format: "float"
              example: 24.99
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            required:
              - "price"
            properties:
              price:
                type: "number"
                format: "float"
                example: 24.99
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "User not found"
          schema:
            type: "string"
        405:
          description: "Validation exception"
          schema:
            type: "string"
    delete:
      tags:
        - "items"
      security:
        - Bearer: []
      summary: "Deletes a clothing item"
      description: "Deletes an item from the db"
      produces:
      - "application/json"
      parameters:
      - name: "itemId"
        in: "path"
        description: "Clothing item to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/clothing"
        404:
          description: "Clothing item not found"
          schema:
            type: "string"
  /users:
    # get:
    #   tags:
    #     - "users"
    #   summary: "Fetches all the users"
    #   description: "Gets the entire users db"
    #   produces:
    #   - "application/json"
    #   responses:
    #     200:
    #       description: "Successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/users"
    #     400:
    #       description: "Bad Request"
    #       schema:
    #         type: "string"
    #     404:
    #       description: "Users not found"
    #       schema:
    #         type: "string"
    post:
      tags:
        - "users"
      summary: "Add a new user to the db"
      description: "Creates a new user in the db"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "newUser"
          in: "body"
          description: "User info that gets added to the db"
          required: true
          schema:
            $ref: "#/definitions/users"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        405:
          description: "Invalid Input"
          schema:
            type: "string"
  /users/{userId}:
    get:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Find user by ID"
      description: "Returns a single user by ID"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: 'int64'
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/users"
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "User not found"
          schema:
            type: "string"
    patch:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Update an existing user"
      description: "This can only be done by the admin or logged in user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "updatedUser"
          in: "body"
          description: "User to be updated"
          required: true
          schema:
            type: "object"
            required:
              - "email"
            properties:
              email:
                type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            required:
              - "email"
            properties:
              email:
                type: "string"
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    # delete:
    #   tags:
    #     - "users"
    #   security:
    #     - Bearer: []
    #   summary: "Delete user"
    #   description: "This can only be done by the admin or logged in user."
    #   produces:
    #   - "application/json"
    #   parameters:
    #   - name: "userId"
    #     in: "path"
    #     description: "The ID of the user that needs to be deleted"
    #     required: true
    #     type: "integer"
    #     format: 'int64'
    #   responses:
    #     200:
    #       description: "successful operation"
    #       schema:
    #       $ref: "#/definitions/users"
    #     400:
    #       description: "Invalid username supplied"
    #       schema:
    #         type: "string"
    #     404:
    #       description: "User not found"
    #       schema:
    #         type: "string"
  /users/{userId}/favorites:
    get:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Fetches a favorite by user ID"
      description: "Fetches all favorites of selected user"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return favorites"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/favorites"
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "Favorites not found"
          schema:
            type: "string"
    post:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Add a new favorite to the db"
      description: "This can only be done by a logged in user"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "newFavorite"
        in: "body"
        description: "Favorite that gets added to the db"
        required: true
        schema:
          $ref: "#/definitions/favorites"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/favorites"
        405:
          description: "Invalid input"
          schema:
            type: "string"
  /users/{userId}/orders:
    get:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Fetches an order by user ID"
      description: "Fetches all orders of selected user"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return favorites"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/orders"
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "Order not found"
          schema:
            type: "string"
    post:
      tags:
        - "users"
      security:
        - Bearer: []
      summary: "Add a new order to the db"
      description: "This can only be done by a logged in user"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "newOrder"
          in: "body"
          description: "Order that gets added to the db"
          required: true
          schema:
            $ref: "#/definitions/orders"
      responses:
        200:
          description: "Successful Operation"
          schema:
            $ref: "#/definitions/orders"
        405:
          description: "Invalid input"
          schema:
            type: "string"
  /favorites/{favoriteId}:
    delete:
      tags:
        - "favorites"
      security:
        - Bearer: []
      summary: "Delete favorite by ID"
      description: ""
      produces:
      - "application/json"
      parameters:
      - name: "favoriteId"
        in: "path"
        description: "ID of the favorite that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/favorites"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Favorite not found"
  # /orders:
    # get:
    #   tags:
    #     - "orders"
    #   summary: "Fetches all the orders"
    #   description: "Gets all orders from the db"
    #   produces:
    #     - "application/json"
    #   responses:
    #     200:
    #       description: "Successful operation"
    #       schema:
    #         type: "array"
    #         items:
    #           $ref: "#/definitions/orders"
    #     400:
    #       description: "Invalid ID supplied"
    #       schema:
    #         type: "string"
    #     404:
    #       description: "Orders not found"
    #       schema:
    #         type: "string"
  /orders/{orderId}:
    get:
      tags:
        - "orders"
      security:
        - Bearer: []
      summary: "Fetches an order by the order ID"
      description: ""
      produces:
        - "application/json"
      parameters:
        - name: "orderId"
          in: "path"
          description: "ID of order to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/orders"
        400:
          description: "Invalid ID supplied"
          schema:
            type: "string"
        404:
          description: "Order not found"
          schema:
            type: "string"
definitions:
  orders:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      total:
        type: "number"
        format: "float"
        example: 189.94
      comformationNum:
        type: "integer"
        format: "int64"
        example: 182957539
      username:
        type: "string"
        example: "sacummings91"
      email:
        type: "string"
        example: "sacummings91@gmail.com"
      quantity:
        type: "integer"
        format: "int32"
        example: 1
      dateCreated:
        type: "string"
      usersId:
        type: "integer"
        format: "int64"
  users:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "sacummings91"
      firstName:
        type: "string"
        example: "Steven"
      lastName:
        type: "string"
        example: "Cummings"
      email:
        type: "string"
        example: "sacummings91@gmail.com"
      password:
        type: "string"
        example: "c00kies"
      status:
        type: "string"
        example: "admin"
      dateCreated:
        type: "string"
  clothing:
    type: "object"
    required:
      - "name"
      - "description"
      - "category"
      - "isFeatured"
      - "price"
      - "imageUrl"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
        example: "black t-shirt"
      description:
        type: "string"
        example: "this is a black t shirt"
      category:
        type: "string"
        description: "clothing item category"
        enum:
          - "shirts"
          - "jackets"
          - "bottoms"
          - "footwear"
      isFeatured:
        type: "boolean"
      price:
        type: "number"
        format: "float"
        example: 29.99
      imageUrl:
        type: "string"
        example: "some really long image url here"
  favorites:
    type: "object"
    required:
      - "username"
      - "name"
      - "userId"
      - "clothingId"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "sacummings91"
      name:
        type: "string"
        example: "Black T-Shirt"
      userId:
        type: "integer"
        format: "int64"
      clothingId:
        type: "integer"
        format: "int64"
  loginObj:
    type: "object"
    required:
    - "username"
    - "password"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "sacummings91"
      password:
        type: "string"
        example: "c00kies"
